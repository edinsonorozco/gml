package com.ms.clients.controllers;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;
import com.ms.activities.entities.Clients;
import com.ms.activities.services.ClientsInterfaces;

@RestController
@RequestMapping("/api")
public class ClientsController {
	
	@Autowired
    private ClientsInterfaces clientsInterfaces;

    @GetMapping("/listClients")
    public List<Clients> listAllClients() {
        return clientsInterfaces.findAll();
    }
    
    @PostMapping("/registerClients")
    @ResponseStatus(HttpStatus.CREATED)
    public ResponseEntity<?> registerClients(@RequestBody Clients clients) {
        Map<String, Object> response = new HashMap<>();
        Clients clientsAux = clientsInterfaces.findById(clients.getSharedKey());
        if (clientsAux != null) {
            response.put("message", "Ya existe un cliente con dicha sharedKey");
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }
        try {
        	clientsInterfaces.save(clients);
            response.put("message", "Cliente creado con éxito.");
            response.put("objectResponse", clients);
            return new ResponseEntity<>(response, HttpStatus.CREATED);
        } catch (DataAccessException e) {
            response.put("message", "Error al hacer registro en la base de datos.");
            response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
    @PostMapping(value = "/deleteClients")
	public ResponseEntity<?> deleteEmployee(@RequestBody String sharedKey) {
    	Map<String, Object> response = new HashMap<>();
		try {
			clientsInterfaces.delete(sharedKey);
			response.put("message", "Cliente eliminado con éxito.");            
            return new ResponseEntity<>(response, HttpStatus.OK);
		} catch (DataAccessException exception) {
			response.put("message", "Error al hacer la eliminacion en la base de datos.");
            response.put("error", exception.getMessage().concat(": ").concat(exception.getMostSpecificCause().getMessage()));
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
    
    @PutMapping(value = "/updateClients")
	public ResponseEntity<?> updateEmpleado(@RequestBody Clients client) {
    	Map<String, Object> response = new HashMap<>();
    	try {
    		clientsInterfaces.update(client);			
			response.put("message", "Cliente actualizado con éxito.");
			response.put("objectResponse", client);
            return new ResponseEntity<>(response, HttpStatus.OK);
		} catch (DataAccessException exception) {
			response.put("message", "Error al hacer la actualizacion en la base de datos.");
            response.put("error", exception.getMessage().concat(": ").concat(exception.getMostSpecificCause().getMessage()));
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}

}
