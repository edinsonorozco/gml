package com.ms.clients.controllers;

import com.ms.activities.services.EmployeeService;
import com.ms.clients.entities.Employee;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import java.util.List;
import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    @GetMapping("/listEmployees")
    public List<Employee> listAllEmployee() {
        return employeeService.findAll();
    }
    
    @PostMapping("/registerEmployee")
    @ResponseStatus(HttpStatus.CREATED)
    public ResponseEntity<?> registerEmployee(@RequestBody Employee employee) {
        Map<String, Object> response = new HashMap<>();
        Employee employeeAux = employeeService.findByIdentification(employee.getIdentification());
        if (employeeAux != null) {
            response.put("message", "Ya existe un empleado con dicha cédula");
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }
        try {
        	employeeService.save(employee);
            response.put("message", "Empleado creado con éxito.");
            response.put("objectResponse", employee);
            return new ResponseEntity<>(response, HttpStatus.CREATED);
        } catch (DataAccessException e) {
            response.put("message", "Error al hacer registro en la base de datos.");
            response.put("error", e.getMessage().concat(": ").concat(e.getMostSpecificCause().getMessage()));
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
    @PostMapping(value = "/deleteEmployee")
	public ResponseEntity<?> deleteEmployee(@RequestBody long idEmpleado) {
    	Map<String, Object> response = new HashMap<>();
		try {
			employeeService.delete(idEmpleado);
			response.put("message", "Empleado eliminado con éxito.");            
            return new ResponseEntity<>(response, HttpStatus.OK);
		} catch (DataAccessException exception) {
			response.put("message", "Error al hacer la eliminacion en la base de datos.");
            response.put("error", exception.getMessage().concat(": ").concat(exception.getMostSpecificCause().getMessage()));
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
    
    @PutMapping(value = "/updateEmployee")
	public ResponseEntity<?> updateEmpleado(@RequestBody Employee empleado) {
    	Map<String, Object> response = new HashMap<>();
    	try {
			employeeService.update(empleado);			
			response.put("message", "Empleado actualizado con éxito.");
			response.put("objectResponse", empleado);
            return new ResponseEntity<>(response, HttpStatus.OK);
		} catch (DataAccessException exception) {
			response.put("message", "Error al hacer la actualizacion en la base de datos.");
            response.put("error", exception.getMessage().concat(": ").concat(exception.getMostSpecificCause().getMessage()));
            return new ResponseEntity<>(response, HttpStatus.INTERNAL_SERVER_ERROR);
		}
	}
}
